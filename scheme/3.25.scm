(define (assoc key table)
  (cond ((null? table) false)
        ((equal? key (caar table))
         (car table))
        (else (assoc key (cdr table)))))

(define (make-table)
  (let ((local-table (list '*table*)))
    (define (lookup . keys)
      (define (lookup_ k table)
        (if (null? (cdr k))
            (let ((record (assoc (car k) table)))
              (if record
                  (cdr record)
                  false))
            (let ((subtable (assoc (car k) table)))
              (if subtable
                  (lookup_ (cdr k) subtable)
                  false))))
      (lookup_ keys local-table))
    (define (insert! value . keys)
      (define (insert!_ k value table)
        (if (null? (cdr k))
            (let ((record (assoc (car k) table)))
              (if record
                  (set-cdr! record value)
                  (set-cdr! table
                            (cons (cons (car k)
                                        value)
                                  (cdr table)))))
            (let ((subtable (assoc (car k) table)))
              (if subtable
                  (insert!_ (cdr k) value subtable)
                  (set-cdr! table
                            (cons (cons (car k)
                                        value)
                                  (cdr table)))))))
      (insert!_ keys value local-table)
      'OK)
    (define (dispatch m)
      (cond ((eq? m 'lookup) lookup)
            ((eq? m 'insert!) insert!)
            (else (error "Unknow operation -- TABLE" m))))
    dispatch))