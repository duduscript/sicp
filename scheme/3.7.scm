(define (make-account balance password)
  (define times 0)
  (define (withdraw amount)
    (if (>= balance amount)
        (begin (set! balance (- balance amount))
               balance)
        "Insufficient funds"))
  (define (deposit amount)
    (set! balance (+ balance amount))
    balance)
  (define (dispatch p m)
    (if (eq? p password)
        (begin (set! times 0)
               (cond ((eq? m 'withdraw) withdraw)
                     ((eq? m 'deposit) deposit)
                     (else (error "Unknow request -- MAKE ACCOUNT"
                                  m))))
        (begin (set! times (+ times 1))
               (if (>= times 7)
                   (error "Call the cops!")
                   (error "Incorrect password")))))
  dispatch)

(define (make-joint account password new-password)
  (define times 0)
  (define (dispatch p m)
    (if (eq? p new-password)
        (cond ((eq? m 'withdraw)
               (account password 'withdraw))
              ((eq? m 'deposit)
               (account password 'deposit))
              (else (error "Unknow request -- MAKE ACCOUNT"
                           m)))
        (begin (set! times (+ times 1))
               (error "Incorrect password"))))
  dispatch)

(define paul-acc (make-account 100 '123))

(define peter-acc
  (make-joint paul-acc '123 '1234))(define sign 0)
(define (f n)
  (cond ((and (= n 0) (= sign 1))
         (begin (set! sign 0)
                0))
        ((and (= n 0) (= sign 0))
         (begin (set! sign 1)
                0))
        ((and (= n 1) (= sign 0))
         (begin (set! sign 1)
                1))
        ((and (= n 1) (= sign 1))
         (begin (set! sign 0)
                0))))